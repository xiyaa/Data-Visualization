install.packages(MASS)
install.packages('MASS')
for(i in 1:8){Obs[i]=Tabla[[i]]}   #La tabla tiene que ir de 0 a infinito
X2=sum((Obs-E)^2/E)
##p-valor
1-pchisq(X2,5)
## Jarque-Bera muy usado para contrastar normalidad en Econometría. Paquete tseries:
library(tseries)
jarque.bera.test(tiempos$V1)
## Contraste de la Chi-2, SOLO para normalidad
library(nortest)
getwd()
mis_tiempos<-read.table('tiempos_xy.txt')
mis_tiempos
mis_tiempos<-read.table('tiempos_xy.txt')
mis_tiempos<-mis_tiempos$V1
mis_tiempos
mis_tiempos2<-readread.table('tiempos_ym.txt')
mis_tiempos2<-read.table('tiempos_ym.txt')
mis_tiempos2<-read.table('tiempos_ym.txt')
mis_tiempos2<-mis_tiempos2$V1
mis_tiempos2
mis_tiempos<-read.table('tiempos_xy.txt')
tiempos_2<-mis_tiempos$V1
tiempos_2
mis_tiempos2<-read.table('tiempos_ym.txt')
tiempos_1<-mis_tiempos2$V1
tiempos_1
mis_tiempos2<-read.table('tiempos_xy.txt')
tiempos_2<-mis_tiempos2$V1
tiempos_2
mis_tiempos1<-read.table('tiempos_ym.txt')
tiempos_1<-mis_tiempos1$V1
tiempos_1
var.test(tiempos_1,tiempos_2, ratio=1, alternative="two.sided",conf.level=0.98)
t.test(tiempos_1,tiempos_2, mu=0, alternative="two.sided",paired=FALSE,var.equal=TRUE,conf.level=0.98)
library(ggplot2)
# Creo un data frame con los dos vectores de tiempos. Atención, yo en mi caso tengo dos vectores con 30 datos
datos <- data.frame( tiempos=c(tiempos_1,tiempos_2), jugador=gl(2,30))
# Comparamos visualmente las funciones de distribución empíricas de ambos jugadores
ggplot(datos, aes(x=tiempos, col=jugador)) + stat_ecdf()
# Comparamos visualmente las funciones de densidad
ggplot(datos, aes(x=tiempos, col=jugador)) + geom_density()
# Realizamos el test de Kolmogorov-Smirnov
ks.test(tiempos_1, tiempos_2)
pt(1.034,df=9,lower.tail=FALSE)
2*.0.16
2*0.16
qchisq
update())
update()
update(R)
install.packages("faraway")
library(faraway)
summary(chicago)
#Eliminamos de nuestro conjunto de datos la variable volact (asociada al mercado voluntario)
#Dividimos también por 1000 la variable income
ch <- data.frame(chicago[,1:4],involact=chicago[,6],income=chicago[,7]/1000)
#ANÁLISIS DESCRIPTIVO DE LOS DATOS
summary(ch)
#ANÁLISIS DESCRIPTIVO DE LOS DATOS
summary(ch)
#Intervalos de confianza al 95% para los parámetros y contrastes de significatividad
c(g$coefficients[1]+ qt(0.025,45)*0.096611, g$coefficients[1]- qt(0.025,45)* 0.096611)
#Vemos la correlación gráficamente
par(mfrow=c(1,1))
library('corrplot')
corrplot(cor(ch),method="circle")
#REGRESIÓN LINEAL SIMPLE entre involact y race
g<-lm(involact ~ race,data=ch)
# representamos gráficamente el ajuste
datosGraph<-data.frame(ch$race,ch$involact)
names(datosGraph)<-c("race","involact")
library(ggplot2)
ggplot(datosGraph, aes(x=race, y=involact))+
geom_smooth(method='lm', formula=y~x, se=FALSE, col='dodgerblue1') +
geom_point() +
theme_light()
datosGraph$predicciones <- predict(g)
ggplot(datosGraph, aes(x=race, y=involact)) +
geom_smooth(method="lm", se=FALSE, color="Lightgrey") +
geom_segment(aes(xend= race, yend=predicciones), col="blue",  lty='dashed') +
geom_point() +
geom_point(aes(y=predicciones), col='red') +
theme_light()
#Analizamos la información proporcionada sobre el ajuste realizado
#resumen de los residuos, coeficientes, significatividad individual, R2, R2 ajustado, contraste de regresión, varianza residual
summary(g)
datosGraph$residuos <- residuals(g)
ggplot(datosGraph, aes(x=race, y=residuos)) +
geom_smooth(method="lm", se=FALSE, color="Lightgrey") +
geom_point() +
theme_light()
#Intervalos de confianza al 95% para los parámetros y contrastes de significatividad
c(g$coefficients[1]+ qt(0.025,45)*0.096611, g$coefficients[1]- qt(0.025,45)* 0.096611)
#Visualizamos la tabla ANOVA
anova(g)
#Normalidad: QQ-plot de los residuos e histograma
par(mfrow=c(1,2))
qqnorm(g$res)
qqline(g$res)
hist(g$res,10)
#Hago la transformación de Boxcox
library(MASS)
#desplazo los valores porque tienen que ser estrictamente mayores que 0, y mi variable tiene como valor mínimo precisamente el 0.
tras_involact<-ch$involact+1
summary(tras_involact)
bc <- boxcox (tras_involact ~ch$race)
lambda <- bc$x[which.max (bc$y)]
nuevo_modelo <- lm (((tras_involact ^ lambda-1) / lambda) ~ ch$race)
#QQ-plot e histograma para el modelo transformado de Box-Cox
par(mfrow=c(1,2))
qqnorm (nuevo_modelo$residuals)
qqline (nuevo_modelo$residuals)
hist(nuevo_modelo$res,10)
#Independencia (estadístico de Durbin-Watson)
library(lmtest)
dwtest(g,alternative ="two.sided",iterations = 1000)
#Identificar las observaciones con menor y mayor residuo
sort(g$res)[c(1,47)]
summary(g$res)
#visualizo los valores de los residuos de todos los códigos postales.
g$res
#representamos gráficamente los residuos
par(mfrow=c(1,1))
getwd()
setwd('D:\Docs\UPM\Secretaria\master_eit\UPM\Statistical Data Analysis')
D:\Docs\UPM\Secretaria\master_eit\UPM\Statistical Data Analysis
setwd('D:\Docs\UPM\Secretaria\master_eit\UPM\Statistical Data Analysis')
setwd("D:\Docs\UPM\Secretaria\master_eit\UPM\Statistical Data Analysis")
setwd(D:\Docs\UPM\Secretaria\master_eit\UPM\Statistical Data Analysis)
setwd('''D:\Docs\UPM\Secretaria\master_eit\UPM\Statistical Data Analysis''')
setwd('D:/Docs/UPM/Secretaria/master_eit/UPM/Statistical Data Analysis')
getwd()
# Libraries
library(tidyverse)
install.packages('tydiverse')
install.packages('tidyverse')
getwd()
# Libraries
library(tidyverse)
rm(list=ls())
# Libraries
library(tidyverse)
library(GGally)
library(moments)
## Import data set from the web
url="http://lib.stat.cmu.edu/datasets/1993.expo/cereal"
cereals <- read.table(url, header=FALSE, as.is=TRUE, na.strings="-1")
# or from local file
cereals <- read.table("cereal.txt", header=FALSE, as.is=TRUE, na.strings="-1")
names(cereals) <- c('name','mfr','type','calories','protein','fat','sodium','fiber','carbo',
'sugars','shelf','potass','vitamins','weight','cups')
# or from local file
cereals <- read.table("cereal.txt", header=FALSE, as.is=TRUE, na.strings="-1")
names(cereals) <- c('name','mfr','type','calories','protein','fat','sodium','fiber','carbo',
'sugars','shelf','potass','vitamins','weight','cups')
#checking for missing data and its number
sum(is.na(cereals))
cereals %>%
summarise_all(~(sum(is.na(.))))
#deleting missing values, creating new data frame cereal. There exist imputation methods, but we're not studying them.
cereals=na.omit(cereals)
str(cereals)
# deleting missing values partially, in some columns only
cereals=cereals[complete.cases(cereals[,1:13]),]
clear
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
help(help)
help(help)
install.packages()
help(help)
install.packages()
install.packages("shiny")
setwd("~/")
getwd()
setwd("D:/Docs/UPM/Secretaria/master_eit/UPM/Statistical Data Analysis")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
View(cereals)
install.packages("shiny")
library(shiny)
runExample("01 hello")
library(shiny)
runExample("01_hello")
runApp("lesson_1.R")
getwd()
setwd("~/")
setwd("D:/Docs/UPM/Secretaria/master_eit/UPM/Data Visualization/shiny_tutorial/lesson_1")
runApp("lesson_1.R")
runApp("lesson_1.R")
runApp('lesson_2.R')
runApp('lesson_2.R')
install.packages(bsicons)
install.packages('bsicons')
runApp('lesson_2.R')
runApp('lesson_1.R')
runApp('lesson_3_example.R')
# Define UI ----
ui <- page_sidebar(
title = "censusVis",
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 5,
max = 50,
value = 30
),
#text
helpText(
"Note: help text isn't a true widget,",
"but it provides an easy way to add text to",
"accompany other widgets."
),
#dropdown
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
runApp('lesson_3.R')
runApp('lesson_3.R')
runApp('lesson_3.R')
"You have selected this"
runApp('census-app/lesson_4.R')
runApp('census-app/lesson_4.R')
runApp("lesson_4.R", display.mode = "showcase")
runApp("census-app", display.mode = "showcase")
runApp("census_app", display.mode = "showcase")
runApp("census-app", display.mode = "showcase")
paste("You have selected", input$var)
runApp('census-app/lesson_4.R')
runApp("census-app", display.mode = "showcase")
runApp("census-app", display.mode = "showcase")
rlang::last_trace()
output$selected_var <- renderText({
paste("You have selected", input$var)
})
runApp("census-app", display.mode = "showcase")
runApp("census-app", display.mode = "showcase")
install.packages(c("maps", "mapproj"))
setwd("D:/Docs/UPM/Secretaria/master_eit/UPM/Data Visualization/shiny_tutorial/lesson_5")
runApp("census-app", display.mode = "showcase")
setwd("D:/Docs/UPM/Secretaria/master_eit/UPM/Data Visualization/shiny_tutorial/lesson_6")
runApp(stockVis)
runApp("stockVis")
install.packages("quantmod")
install.packages("quantmod")
runGitHub( "Data-Visualization/census-app", "xiyaa")
getwd()
runGitHub( "Data-Visualization", "xiyaa")
library(shiny)
runGitHub( "Data-Visualization", "xiyaa")
runGitHub( "Data-Visualization", subdir='census-app',"xiyaa")
getwd()
runApp("stockVis")
runGitHub( "Data-Visualization", subdir='stockVis',"xiyaa")
#runGitHub
runGitHub( "Data-Visualization", subdir='stockVis',"xiyaa")
#runGist (used lesson 3)
runGist('fd63849b1904848f0cc021d7038f08b8')
#runGist (used lesson 3)
runGist('eb3470beb1c0252bd0289cbc89bcf36f')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
getwd*
()
getwd()
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
getwd()
getwd()
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
getwd()
setwd('D:/Docs/UPM/Secretaria/master_eit/UPM/Data Visualization/shiny_tutorial/lesson_6')
getwd()
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
path <- 'D:/Docs/UPM/Secretaria/master_eit/UPM/Data Visualization/shiny_tutorial/lesson_6'
normalizePath(path)
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
setwd('C:/Users/xias/OneDrive/Documentos')
getwd()
normalizePath("D:/Docs/UPM/Secretaria/master_eit/UPM/Data Visualization/shiny_tutorial/lesson_6", mustWork = FALSE)
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
file.edit("~/.Rprofile")
setwd('D:\Apps\R-4.2.2')
setwd('D://Apps//R-4.2.2')
getwd()
file.edit("~/.Rprofile")
file.edit("~/.Renviron")
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
Sys.getenv()
Sys.setenv(R_USER="D:/Apps/R-4.2.2")
Sys.getenv()
Sys.setenv(R_USER="D:/Apps/R-4.2.2/user")
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
Sys.setenv(R_USER="D:/Apps/R-4.2.2/user")
Sys.getenv()
Sys.setenv(HOME="D:/Apps/R-4.2.2/home")
Sys.getenv()
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
getwd()
getwd()
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
deployApp()
library(rsconnect)
rsconnect::deployApp()
rsconnect::setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
setAccountInfo(name='xiyasun', token='5D0C27D98495A2908FB05688EE5739BB', secret='ing1CBOeE9Hq+7AJubrmzYUWB8MCBh/xq1y3DNTe')
setwd("D:/Docs/UPM/Secretaria/master_eit/UPM/Data Visualization/shiny_tutorial/lesson_1/census-app")
rsconnect::deployApp()
setwd("D:/Docs/UPM/Secretaria/master_eit/UPM/Data Visualization/shiny_tutorial/lesson_6/stockVis")
rsconnect::deployApp()
warnings()
Sys.setlocale("LC_ALL", "Chinese")
Sys.setlocale("LC_ALL", "UTF-8")
Sys.setlocale("LC_ALL", "Chinese_Simplified.936")  # or "Chinese_China.936"
Sys.getlocale()
rsconnect::deployApp()
